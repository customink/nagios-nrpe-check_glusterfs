#!/bin/bash

## Fork of MarkRâ€™s GlusterFS-checks at:
## http://exchange.nagios.org/directory/Plugins/System-Metrics/File-System/GlusterFS-checks/details

# This Nagios script was written against version 3.5 of Gluster.  Older
# versions will most likely not work at all with this monitoring script.
#
# Gluster currently requires elevated permissions to do anything.  In order to
# accommodate this, you need to allow your Nagios user some additional
# permissions via sudo.  The line you want to add will look something like the
# following in /etc/sudoers (or something equivalent):
#
# Defaults:nagios !requiretty
# nagios ALL=(root) NOPASSWD:/usr/sbin/gluster volume status [-_[\:alnum\:]]+ detail,/usr/sbin/gluster volume heal [-_[\:alnum\:]]+ info
#
# That should give us all the access we need to check the status of any
# currently defined peers and volumes.

# Inspired by a script of Mark Nipper
#
# 2013, Mark Ruys, mark.ruys@peercode.nl

PATH=/sbin:/bin:/usr/sbin:/usr/bin

PROGNAME=$(basename -- $0)
PROGPATH=$(sed -e 's,[\\/][^\\/][^\\/]*$,,' <<<$0)
REVISION="1.0.3"

#. $PROGPATH/utils.sh
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

# parse command line
usage () {
	cat <<-USAGE
	USAGE:
	  $PROGNAME -v VOLUME -n BRICKS [-w GB -c GB]
	     -n BRICKS: number of bricks
	     -w and -c values in GB
	USAGE
	exit $STATE_UNKNOWN
}

while getopts "hv:n:w:c:" opt; do
	case $opt in
	h) usage ;;
	v) VOLUME=${OPTARG} ;;
	n) BRICKS=${OPTARG} ;;
	w) WARN=${OPTARG} ;;
	c) CRIT=${OPTARG} ;;
	*) usage ;;
	esac
done

if [[ -z $VOLUME ]] || [[ -z $BRICKS ]]; then
	usage
fi

Exit () {
	echo "$1: ${2:0}"
	status=STATE_$1
	exit ${!status}
}

# check for commands
for cmd in basename bc awk sudo pidof gluster; do
	if ! type -p "$cmd" >/dev/null; then
		Exit UNKNOWN "$cmd not found"
	fi
done

# check for glusterd (management daemon)
if ! pidof glusterd &>/dev/null; then
	Exit CRITICAL "glusterd management daemon not running"
fi

# check for glusterfsd (brick daemon)
if ! pidof glusterfsd &>/dev/null; then
	Exit CRITICAL "glusterfsd brick daemon not running"
fi

# get volume heal status
heal=0
for entries in $(sudo gluster volume heal ${VOLUME} info | awk '/^Number of entries: /{print $4}'); do
	if [[ $entries -gt 0 ]]; then
		let heal+=entries
	fi
done
if [[ $heal -gt 0 ]]; then
	errors+=($heal unsynched entries)
fi

# get volume status
bricksfound=0
freegb=9999999
shopt -s nullglob
while read -r line; do
	field=($line)
	case ${field[0]} in
	Brick) 
		brick=${field[@]:2}
		;;
	Disk)
		key=${field[@]:0:3}
		if [[ $key == "Disk Space Free" ]]; then
			freeunit=${field[@]:4}
			free=${freeunit:0:$((${#freeunit}-2))}
			unit=${freeunit#$free}
			if [[ $unit == "TB" ]]; then
				free=$(( $freeconvgb * 1024 ))
				unit="GB"
			fi
			if [[ $unit != "GB" ]]; then
				Exit UNKNOWN "unknown disk space size $freeunit"
			fi
			free=$(bc -q <<<"$free / 1")
			if [[ $free -lt $freegb ]]; then
				freegb=$free
			fi
		fi
		;;
	Online)
		online=${field[@]:2}
		if [[ ${online} = "Y" ]]; then
			let bricksfound++
		else
			errors+=($brick offline)
		fi
		;;
	esac
done < <(sudo gluster volume status ${VOLUME} detail)

if [[ $bricksfound -eq 0 ]]; then
	Exit CRITICAL "no bricks found"
elif [[ $bricksfound -lt $BRICKS ]]; then
	errors+=(found $bricksfound bricks, expected $BRICKS)
	ex_stat="WARNING_stat"
fi

if [[ -n $CRIT ]] && [[ -n $WARN ]]; then
	if [[ $CRIT -ge $WARN ]]; then
		Exit UNKNOWN "critical threshold below warning"
	elif [[ $freegb -lt $CRIT ]]; then
		errors+=(free space ${freegb}GB)
	        ex_stat="CRITICAL_stat"
	elif [[ $freegb -lt $WARN ]]; then
		errors+=(free space ${freegb}GB)
		ex_stat="WARNING_stat"
	fi
fi

# exit with warning if errors
if [[ -n $errors ]]; then
	sep='; '
	msg=$(printf "${sep}%s" "${errors[@]}")
	msg=${msg:${#sep}}
	if [[ ${ex_stat} == "CRITICAL_stat" ]]; then
		Exit CRITICAL "${msg}"
	else
		Exit WARNING "${msg}"
	fi
fi

# exit with no errors
Exit OK "${bricksfound} bricks; free space ${freegb}GB"
